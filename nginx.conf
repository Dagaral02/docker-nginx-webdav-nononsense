daemon off;
user abc abc;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
  worker_connections  1024;
}

http {
  include    mime.types;
  dav_ext_lock_zone zone=foo:10m;
  
  send_timeout 3600;
  client_body_timeout 3600;
  keepalive_timeout 3600;
  lingering_timeout 3600;
  client_max_body_size 10G;
  
  server {
    server_name localhost;
    listen 80;
    root /data;

    if ($request_method = MKCOL) {
      rewrite ^(.*[^/])$ $1/ break;
    }

    if (-d $request_filename) {
      rewrite ^(.*[^/])$ $1/ break;
    }

    location ~ \.(_.*|DS_Store|Spotlight-V100|TemporaryItems|Trashes|hidden|localized)$ {
      access_log  off;
      error_log   off;
      if ($request_method = PUT) {
        return 403;
      }
      return 404;
    }

    location ~ \.metadata_never_index$ {
      return 200 "Don't index this drive, Finder!";
    }

    location / {
      auth_basic "Restricted";
      auth_basic_user_file htpasswd;

      dav_methods PUT DELETE MKCOL COPY MOVE;
      dav_ext_methods PROPFIND OPTIONS LOCK UNLOCK;
      dav_ext_lock zone=foo;
      create_full_put_path on;

      fancyindex on;
      fancyindex_exact_size off;
      fancyindex_localtime on;
      fancyindex_name_length 255;


      set $destination $http_destination;
      set $parse "";
      
      if ($request_method = OPTIONS) {
        add_header DAV '1, 2';
        add_header Allow 'OPTIONS, GET, HEAD, POST, PUT, MKCOL, MOVE, COPY, DELETE, PROPFIND, PROPPATCH';
        return 200;
	    }
	    
	    # Fix from http://netlab.dhis.org/wiki/ru:software:nginx:webdav#проблема_1_-_майкрософт_нарушает_стандарты_и_свои_обещания
	    error_page 599 = @propfind_handler;
      if ($request_method = PROPFIND) {
		    return 599;
	    }
	    
	    # Fix from http://netlab.dhis.org/wiki/ru:software:nginx:webdav#проблема_1_-_майкрософт_нарушает_стандарты_и_свои_обещания
	    error_page 597 = @copy_move_handler;
      if ($request_method = MOVE) {
        set $parse "${parse}M";
        return 597;
      }

      if ($request_method = COPY) {
        set $parse "${parse}M";
        return 597;
      }
      
      # Fix from http://netlab.dhis.org/wiki/ru:software:nginx:webdav#проблема_1_-_майкрософт_нарушает_стандарты_и_свои_обещания
      error_page	598 = @delete_handler;
      if ($request_method = DELETE) {
        return 598;
      }

      if (-d $request_filename) {
        rewrite ^(.*[^/])$ $1/ break;
        set $parse "${parse}D";
      }

      if ($destination ~ ^https?://.*/(.*)$) {
        set $ob $1;
        set $parse "${parse}R${ob}";
      }

      if ($parse ~ ^MDR(.*[^/])$) {
        set $mvpath $1;
        set $destination "https?://.*/${mvpath}/";
        more_set_input_headers "Destination: $destination";
      }
    }
    
    location @propfind_handler {
      internal;

      open_file_cache	off;
      if (!-e /data/$uri) { # Microsoft specific handle.
        return 404;
      }
      root			/data;
      dav_ext_methods		PROPFIND;
    }
    
    location @copy_move_handler {
      internal;

      open_file_cache	off;
      if (-d /data/$uri) { # Microsoft specific handle: Add trailing slash to dirs.
        more_set_input_headers 'Destination: $http_destination/';
        rewrite ^(.*[^/])$ $1/ break;
      }
      root			/data;
      dav_methods		COPY MOVE;
    }
    
    location @delete_handler {
      internal;

      open_file_cache	off;
      if (-d /data/$uri) { # Add trailing slash to dirs.
        rewrite ^(.*[^/])$ $1/ break;
      }
      root		/data;
      dav_methods	DELETE;
    }
    
  }
}